// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"wire-tutorial/inmemory"
)

// Injectors from wire.go:

func initializeStorage(cfg Config) (*resultSet, func(), error) {
	string2 := cfg.Name
	storage := inmemory.NewStorageWithName(string2)
	int2, cleanup, err := provideLength(storage)
	if err != nil {
		return nil, nil, err
	}
	storageName, cleanup2, err := provideName(storage)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mainResultSet := &resultSet{
		Storage: storage,
		Length:  int2,
		Name:    storageName,
	}
	return mainResultSet, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type resultSet struct {
	Storage KeyValueStorage
	Length  int
	Name    StorageName
}

type StorageName string

func provideLength(ims *inmemory.Storage) (int, func(), error) {
	return ims.Len(), func() {
		println("provideLength cleaned")
	}, nil
}

func provideName(ims *inmemory.Storage) (StorageName, func(), error) {
	return StorageName(ims.Name()), func() {
		println("provideName cleaned")
	}, nil
}
